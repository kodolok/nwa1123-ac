#!/bin/sh

# This script runs when init it run during the boot process.
# Mounts everything in the fstab

mount -a
mount -o remount +w /

#
# Mount the RAM filesystem to /tmp
#

mount -t ramfs -n none /tmp

export PATH=$PATH:/etc/ath
KVER=`uname -r | cut -f 1 -d '-'`
MODULE_PATH=/lib/modules/$KVER

insmod $MODULE_PATH/athrs_gmac.ko

##
## Put the names of the interfaces in the environmental variables
## (They can be board unique)
##
HSTIF=eth0
export WAN_IF=eth0
export LAN_IF=eth1

ifconfig $WAN_IF up
ifconfig $LAN_IF up
#/etc/rc.d/rc.network
#/etc/rc.d/rc.bridge
#. /etc/ath/apcfg

#enable jumbo frame support for 2048
ethreg -i $WAN_IF -j 1
ethreg -i $WAN_IF -s 2048

# Set mtu for eth0
ifconfig $WAN_IF mtu 2000

# Create virtual interfaces to support Offload over VLAN.
vconfig add ${HSTIF} 2
ifconfig ${HSTIF}.2 up

#if [ "${WLAN_ON_BOOT}" = "y" ]; then
#    /etc/ath/apup
#fi

#
# Enable USB
#
#insmod $MODULE_PATH/usbcore.ko
#insmod $MODULE_PATH/ehci-hcd.ko
#insmod $MODULE_PATH/usb-storage.ko

#insmod $MODULE_PATH/ar9130_udc.ko
insmod $MODULE_PATH/xmiipsave.ko usb=1 gmac1=1 pciep=1 i2s=1
insmod $MODULE_PATH/hif_gmac.ko
insmod $MODULE_PATH/atd.ko

sleep 1

/etc/rc.d/rc.wlan up

#
# Untar the debug tools into /tmp/tools
#

mkdir /tmp/tools
cd /tmp/tools
tar -xzvf /sbin/debug.tgz

/usr/sbin/telnetd
# /usr/sbin/httpd -h /usr/www/
/bin/factoryreset /dev/freset

# start the page cache/kmem cache cleanup timer in the kernel
# echo 1 > /proc/sys/vm/drop-cache

# when processes uses page-cache more than 30% of system memory,
# lets force them to write
# echo 20 > /proc/sys/vm/dirty_ratio

# when the dirty pages cross more than 5% of sys memory,
# kick in the pdflush
# echo 5 > /proc/sys/vm/dirty_background_ratio

#
# LAN Bypass Daemon
# 
# bypd is generated and copied to rootfs only if OFFLOAD_LAN_BYPASS is enabled
#
if [ -f /sbin/bypd ];
then
/sbin/bypd $HSTIF &
fi

if [ -f /sbin/acfgd ];
then
/sbin/acfgd &
fi
